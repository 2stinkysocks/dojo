#!/bin/sh

cd /opt/pwn.college

if [ -n "$1" ]
then
    ACTION="$1"
    shift
else
    ACTION="start"
fi

case "$ACTION" in
    "update")
        git pull
        dojo compose build
        dojo compose up -d
        ;;

    "enter")
        CONTAINER="user_$1"
        shift
        if [ -n "$USER" ]; then
            docker exec -it "$CONTAINER" bash
        else
            docker exec -it --user="$USER" "$CONTAINER" bash
        fi
        ;;

    "compose")
        docker compose --env-file=/opt/pwn.college/data/config.env "$@"
        ;;

    "flask")
        docker exec -it ctfd flask shell "$@"
        ;;

    "db")
        docker exec -it db mysql -pctfd -Dctfd ctfd "$@"
        ;;

    "backup")
        mkdir -p data/backups
        docker exec db mysqldump -pctfd --single-transaction --routines --triggers ctfd | gzip > "data/backups/db-$(date -Iseconds).sql.gz"
        ;;

    "restore")
        BACKUP_PATH="data/backups/$1"
        if [ -f "$BACKUP_PATH" ]; then
            gunzip < "$BACKUP_PATH" | docker exec -i db mysql -pctfd -Dctfd
        else
            echo "Error: missing file to restore from" >&2
        fi
        ;;

    "logs")
        journalctl -u pwn.college -f
        ;;

    "restart")
        for cmd in 'build ctfd' 'kill ctfd' 'rm -f ctfd' 'up -d ctfd' 'logs -f ctfd'; do
            docker compose --env-file=/opt/pwn.college/data/config.env $cmd;
        done
        ;;

    "start")
        echo "[+] Setting up container runtime environment."
        container-setup.sh
        echo "[+] Starting systemd. If this is the first start, the challenge container"
        echo "    will be built, which will take a very long time."
        exec /usr/bin/systemd
        ;;

    *)
        echo "Unknown command."
        exit 1
        ;;
esac
